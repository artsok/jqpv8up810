package ParallelStreams.easy;

import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Arrays;

public class TestCaseTough {

    private static Logger logger = LoggerFactory.getLogger(ParallelStreams.easy.TestCaseTough.class);

    /*
    1. A parallel stream allows multiple threads to work on sections of a stream independently.
    Therefore, the output generated by the function passed to the map method will depend on which thread gets to run first
    and which element is that thread processing. Therefore, for example, "b" may be appended to sb before "a".

    2. Chained operations are always executed in the same order. That means, an operation that is chained to a
    stream after another will only be executed after the previous chained operation is finished irrespective of
    whether the stream is parallel or sequential. For example, here, for a given stream element, the forEach
    operation will always execute after the map operation. Therefore, an upper case letter can never be printed before
    its corresponding lower case letter.

    3. The difference between forEach and forEachOrdered is that forEach will allow any element of a parallel stream to
    be processed in any order, while forEachOrdered will always process the elements of a parallel stream in the order
    of their appearance in the original stream. Therefore, in this case, if you leave forEach as it is, the only thing
    guaranteed is that an upper case letter will be printed after its corresponding lower case letter but, for example,
    b may be processed before a, so their order is unpredictable. Thus, for example, aAcbBC is a possible output.

    4. If you replace forEach with forEachOrdered, each element of the upper cased stream will be processed in the same
    original order and therefore, A B and C will always be in that order. However, since the map operation is still
    happening in parallel, the lower case letters may be appended to the StringBuffer in any order at anytime.
    Thus, aAcbBC is a possible output.
     */
    @Test
    public void parallelStreamTest() {
        StringBuffer sb = new StringBuffer();
        Arrays.asList("a", "b", "c").parallelStream().map(x -> {
            sb.append(x);
            return x.toUpperCase();
        }).forEach(sb::append);
        logger.info("Результат выполнения parallelStreamTest '{}'", sb);
    }
}
